Extracting codebase from test.zip...
Extracted to: /var/folders/k9/fhpl8b7s5tbgd3d9hlblp1j00000gn/T/tmpcr5jcm8t/extracted_1754807477
Reading function snippet from run.txt...
Searching for function in codebase...
Detected snippet language: python
Analyzing function dependencies...
Analyzing 4 Python files...
Project prefixes (internal): ['test']
Codebase Dependency Analysis Results
========================================

Function found: cleanup_application_resources
File: test/utils.py
Line: 506
Search method: function_definition

Dependencies by Level:
=========================
Total Dependencies: 6

Level-1 Dependencies (3 functions):
----------------------------------------
  1. test.database.ConnectionPool.cleanup_stale_connections
  2. test.utils.CacheManager.cleanup_expired
  3. test.utils.MetricsCollector.get_summary

Level-2 Dependencies (3 functions):
----------------------------------------
  1. test.database.ConnectionPool.return_connection
  2. test.utils.CacheManager._is_expired
  3. test.utils.CacheManager.delete

All Detected Function/Method Calls:
-----------------------------------
_is_expired, cleanup_expired, cleanup_stale_connections, delete, get_summary
items, keys, len, list, max
now, return_connection, round, sorted, str
sum, timedelta

Detailed Dependency Information:
===================================

LEVEL-1 DEPENDENCIES
====================

1.1 test.database.ConnectionPool.cleanup_stale_connections
================================================================
File: test/database.py
Line: 54
Signature: cleanup_stale_connections(self, timeout_minutes)
Docstring: Clean up connections that haven't been used recently

Nested Dependencies:
  Level-2: test.database.ConnectionPool.return_connection

Source Code:
------------------------------------------------------------
  54:     def cleanup_stale_connections(self, timeout_minutes: int = 30):
  55:         """Clean up connections that haven't been used recently"""
  56:         cutoff_time = datetime.now() - timedelta(minutes=timeout_minutes)
  57:         
  58:         stale_connections = []
  59:         for conn in self.active_connections:
  60:             if conn['last_used'] and conn['last_used'] < cutoff_time:
  61:                 stale_connections.append(conn)
  62:         
  63:         for conn in stale_connections:
  64:             self.return_connection(conn)
  65:         
  66:         return len(stale_connections)
------------------------------------------------------------

1.2 test.utils.CacheManager.cleanup_expired
=================================================
File: test/utils.py
Line: 185
Signature: cleanup_expired(self)
Docstring: Remove expired entries and return count

Nested Dependencies:
  Level-2: test.utils.CacheManager._is_expired, test.utils.CacheManager.delete

Source Code:
------------------------------------------------------------
 185:     def cleanup_expired(self) -> int:
 186:         """Remove expired entries and return count"""
 187:         expired_keys = []
 188:         
 189:         for key in list(self.cache.keys()):
 190:             if self._is_expired(key):
 191:                 expired_keys.append(key)
 192:         
 193:         for key in expired_keys:
 194:             self.delete(key)
 195:         
 196:         return len(expired_keys)
------------------------------------------------------------

1.3 test.utils.MetricsCollector.get_summary
=================================================
File: test/utils.py
Line: 318
Signature: get_summary(self)
Docstring: Get metrics summary

Source Code:
------------------------------------------------------------
 318:     def get_summary(self) -> Dict[str, Any]:
 319:         """Get metrics summary"""
 320:         response_times = self.metrics['response_times']
 321:         avg_response_time = sum(response_times) / len(response_times) if response_times else 0
 322:         
 323:         return {
 324:             'total_requests': self.metrics['requests_total'],
 325:             'total_errors': self.metrics['errors_total'],
 326:             'error_rate': (self.metrics['errors_total'] / max(self.metrics['requests_total'], 1)) * 100,
 327:             'average_response_time': round(avg_response_time, 3),
 328:             'active_users': self.metrics['active_users'],
 329:             'database_queries': self.metrics['database_queries'],
 330:             'top_endpoints': sorted(
 331:                 self.metrics['requests_by_endpoint'].items(),
 332:                 key=lambda x: x[1],
 333:                 reverse=True
 334:             )[:5],
 335:             'top_errors': sorted(
 336:                 self.metrics['errors_by_type'].items(),
 337:                 key=lambda x: x[1],
 338:                 reverse=True
 339:             )[:5]
 340:         }
------------------------------------------------------------

LEVEL-2 DEPENDENCIES
====================

2.1 test.database.ConnectionPool.return_connection
========================================================
File: test/database.py
Line: 48
Signature: return_connection(self, connection)
Docstring: Return a connection to the pool

Source Code:
------------------------------------------------------------
  48:     def return_connection(self, connection):
  49:         """Return a connection to the pool"""
  50:         if connection in self.active_connections:
  51:             self.active_connections.remove(connection)
  52:             self.available_connections.append(connection)
------------------------------------------------------------

2.2 test.utils.CacheManager._is_expired
=============================================
File: test/utils.py
Line: 178
Signature: _is_expired(self, key)
Docstring: Check if cache entry is expired

Source Code:
------------------------------------------------------------
 178:     def _is_expired(self, key: str) -> bool:
 179:         """Check if cache entry is expired"""
 180:         if key not in self.ttl_data:
 181:             return True
 182:         
 183:         return datetime.now() > self.ttl_data[key]
------------------------------------------------------------

2.3 test.utils.CacheManager.delete
========================================
File: test/utils.py
Line: 168
Signature: delete(self, key)
Docstring: Delete value from cache

Source Code:
------------------------------------------------------------
 168:     def delete(self, key: str) -> None:
 169:         """Delete value from cache"""
 170:         self.cache.pop(key, None)
 171:         self.ttl_data.pop(key, None)
------------------------------------------------------------
